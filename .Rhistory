same_relig = case_when(
yourelig_1 == "Catholic" & altrelig == "Catholic" ~ 1,
yourelig_1 == "No Religion" & altrelig == "NoReligion" ~ 1,
yourelig_1 == "Other Religion" & altrelig == "OtherReligion" ~ 1,
yourelig_1 == "Protestant" & altrelig == "Protestant" ~ 1,
TRUE ~ 0
))
# count the number of same-relig alters
df_w3_comb_data <- df_w3_comb_data |>
group_by(egoid) %>%
mutate(n_samerelig = sum(same_relig == 1))
#count the degree
df_w3_comb_data <- df_w3_comb_data |>
group_by(egoid) %>%
mutate(degree = n())
# count the number of diff-relig alters
df_w3_comb_data <- df_w3_comb_data |>
group_by(egoid) %>%
mutate(n_diffrelig = degree-n_samerelig)
# calculate EI Index
df_w3_comb_data <- df_w3_comb_data |>
group_by(egoid) |>
mutate(ei = (n_diffrelig-n_samerelig)/(degree))
#create vars for the denominators
table(df_basicsurv$yourelig_1)
e_cath <- 89+33+71
i_cath <- 525-1
e_none <- 525+33+71
i_none <- 89-1
e_other<- 525+89+71
i_other<- 33-1
e_prot <- 525+89+33
i_prot <- 71-1
df_w3_comb_data <- df_w3_comb_data %>%
mutate(
e_denominator = case_when(
yourelig_1 == "Catholic" ~ e_cath,
yourelig_1 == "No Religion" ~ e_none,
yourelig_1 == "Other Religion" ~ e_other,
yourelig_1 == "Protestant" ~ e_prot,
TRUE ~ 0
))
df_w3_comb_data <- df_w3_comb_data %>%
mutate(
i_denominator = case_when(
yourelig_1 == "Catholic" ~ i_cath,
yourelig_1 == "No Religion" ~ i_none,
yourelig_1 == "Other Religion" ~ i_other,
yourelig_1 == "Protestant" ~ i_prot,
TRUE ~ 0
))
# calculate normalized EI Index
df_w3_comb_data <- df_w3_comb_data |>
group_by(egoid) |>
mutate(ei_norm =
((n_diffrelig/e_denominator)-(n_samerelig/i_denominator))/((n_diffrelig/e_denominator)+(n_samerelig/i_denominator)))
df_w3_model_data <- df_w3_comb_data |>
select(egoid, yourelig_1, degree, ei, ei_norm, n_samerelig, gender_1, race_1)
df_w3_model_data <- distinct(df_w3_model_data)
df_observed_avg_ei <- df_w3_model_data %>%
group_by(yourelig_1) %>%
summarise_at(vars(ei), list(name = mean))
df_observed_avg_ei <-  rename(df_observed_avg_ei, percent = name)
library(tidyr)
library(ggplot2)
library(ggbeeswarm)
#load data if not already in memory
df_sim_avg_ei <- readRDS(here('data', 'df_sim_avg_ei_500.RDS'))
for (i in 2:501){
colnames(df_sim_avg_ei)[i] <- paste0(names(df_sim_avg_ei[i]),"_",i-1)
}
#reshape to long
df_sim_avg_ei <- gather(df_sim_avg_ei, key = sim_num, value = percent, -yourelig_1)
#add column for type
df_sim_avg_ei$type <- "Simulated"
df_observed_avg_ei$type <- "Observed"
# Beeswarm plot in ggplot2
ggplot() +
geom_quasirandom(data = df_sim_avg_ei, aes(x = yourelig_1, y = percent, color = yourelig_1, shape = type), cex=2, width = .5) +
geom_point(data=df_observed_avg_ei, aes(x=yourelig_1, y=percent, shape = type),  cex=3)+
scale_color_brewer(palette = "RdYlBu", guide = "none")+
xlab("Ego's Religious Identity")+
ylab("Average EI Score")+
theme_minimal()+
scale_y_continuous(breaks = seq(-1, 1, by = .2), limits=c(-1,1))+
scale_shape_manual(values = c(18, 16))+
labs(shape = "Data Type",
title = "Average EI Scores in Observed vs Simulated Ego Networks")+
geom_hline(yintercept = 0)
ggsave(path = here('plot.png'), width = 800, height = 500, device='png', dpi=300)
ggsave(path = here(,'plot.png'), width = 800, height = 500, device='png', dpi=300)
ggsave(path = here('data','plot.png'), width = 800, height = 500, device='png', dpi=300)
ggsave('plot.png', width = 800, height = 500, device='png', dpi=300)
ggsave("plot.png",
width = 800,
height = 500,
units = "px",
device= "png",
dpi=300)
ggsave("plot.png",
width = 6.5,
height = 5,
units = "in",
device= "png",
dpi=300)
ggsave("plot.jpg",
width = 6.5,
height = 5,
units = "in",
device= "jpg",
dpi=300)
# Beeswarm plot in ggplot2
ggplot() +
geom_quasirandom(data = df_sim_avg_ei, aes(x = yourelig_1, y = percent, color = yourelig_1, shape = type), cex=2, width = .5) +
geom_point(data=df_observed_avg_ei, aes(x=yourelig_1, y=percent, shape = type),  cex=3)+
scale_color_brewer(palette = "RdYlBu", guide = "none")+
xlab("\nEgo's Religious Identity")+
ylab("Average EI Score")+
theme_minimal()+
scale_y_continuous(breaks = seq(-1, 1, by = .2), limits=c(-1,1))+
scale_shape_manual(values = c(18, 16))+
labs(shape = "Data Type",
title = "Average EI Scores in Observed vs Simulated Ego Networks\n")+
geom_hline(yintercept = 0)
ggsave("plot.jpg",
width = 6.5,
height = 5,
units = "in",
device= "jpg",
dpi=300)
# Beeswarm plot in ggplot2
ggplot() +
geom_quasirandom(data = df_sim_avg_ei, aes(x = yourelig_1, y = percent, color = yourelig_1, shape = type), cex=1, width = .5) +
geom_point(data=df_observed_avg_ei, aes(x=yourelig_1, y=percent, shape = type),  cex=3)+
scale_color_brewer(palette = "RdYlBu", guide = "none")+
xlab("\nEgo's Religious Identity")+
ylab("Average EI Score")+
theme_minimal()+
scale_y_continuous(breaks = seq(-1, 1, by = .2), limits=c(-1,1))+
scale_shape_manual(values = c(18, 16))+
labs(shape = "Data Type",
title = "Average EI Scores in Observed vs Simulated Ego Networks\n")+
geom_hline(yintercept = 0)
# Beeswarm plot in ggplot2
ggplot() +
geom_quasirandom(data = df_sim_avg_ei, aes(x = yourelig_1, y = percent, color = yourelig_1, shape = type), cex=1, width = .5) +
geom_point(data=df_observed_avg_ei, aes(x=yourelig_1, y=percent, shape = type),  cex=3)+
scale_color_brewer(palette = "RdYlBu", guide = "none")+
xlab("Ego's Religious Identity")+
ylab("Average EI Score")+
theme_minimal()+
scale_y_continuous(breaks = seq(-1, 1, by = .2), limits=c(-1,1))+
scale_shape_manual(values = c(18, 16))+
labs(shape = "Data Type",
title = "Average EI Scores in Observed vs Simulated Ego Networks\n")+
geom_hline(yintercept = 0)
ggsave("plot.jpg",
width = 6.5,
height = 5,
units = "in",
device= "jpg",
dpi=300)
# Beeswarm plot in ggplot2
ggplot() +
geom_quasirandom(data = df_sim_avg_ei, aes(x = yourelig_1, y = percent, color = yourelig_1, shape = type), cex=1, width = .5) +
geom_point(data=df_observed_avg_ei, aes(x=yourelig_1, y=percent, shape = type),  cex=2)+
scale_color_brewer(palette = "RdYlBu", guide = "none")+
xlab("Ego's Religious Identity")+
ylab("Average EI Score")+
theme_minimal()+
scale_y_continuous(breaks = seq(-1, 1, by = .2), limits=c(-1,1))+
scale_shape_manual(values = c(18, 16))+
labs(shape = "Data Type",
title = "Average EI Scores in Observed vs Simulated Ego Networks\n")+
geom_hline(yintercept = 0)
ggsave("plot.jpg",
width = 6.5,
height = 5,
units = "in",
device= "jpg",
dpi=300)
ggsave("plot.jpg",
width = 6.5,
height = 5,
units = "in",
device= "jpg",
dpi=700)
# Beeswarm plot in ggplot2
ggplot() +
geom_quasirandom(data = df_sim_avg_ei, aes(x = yourelig_1, y = percent, color = yourelig_1, shape = type), cex=1, width = .5) +
geom_point(data=df_observed_avg_ei, aes(x=yourelig_1, y=percent, shape = type),  cex=2)+
scale_color_brewer(palette = "RdYlBu", guide = "none")+
xlab("\nEgo's Religious Identity")+
ylab("Average EI Score")+
theme_minimal()+
scale_y_continuous(breaks = seq(-1, 1, by = .2), limits=c(-1,1))+
scale_shape_manual(values = c(18, 16))+
labs(shape = "Data Type",
title = "Average EI Scores in Observed vs Simulated Ego Networks\n")+
geom_hline(yintercept = 0)
ggsave("plot.jpg",
width = 6.5,
height = 5,
units = "in",
device= "jpg",
dpi=700)
library(here)
library(readr)
library(dplyr)
# Load data ---------------------------------------------------------------
# load ego network survey
df_netsurv <- read_csv(here('data', 'NetWorkSurvey(2-28-20).csv'))
# load basic survey
df_basicsurv <- read_csv(here('data', 'BasicSurvey(3-6-20).csv'))
# Subset Data -------------------------------------------------------------
# subset the network dataframes to W3
df_netsurv <- df_netsurv |>
filter(wave == 'Wave3')
# Merge data frames -------------------------------------------------------
df_w3_comb_data <- left_join(df_basicsurv, df_netsurv, by = 'egoid')
#netsurv_id_list <- unique(df_netsurv$egoid)
#basicsurv_id_list <- unique(df_basicsurv$egoid)
#comb_id_list <- Reduce(intersect,list(netsurv_id_list,basicsurv_id_list))
# Filter/Subset Data -------------------------------------------------------------
# filter out yourelig == NA
df_w3_comb_data <- df_w3_comb_data |>
filter(!is.na(yourelig_1))
# subset to on-campus ties
df_w3_comb_data <- df_w3_comb_data %>%
filter(altrelucat=="Student")
# impute missing alter relig in cases where
# 1) the alter was reported by multiple egos
# 2) at least one ego attributed a relig to that alter
# 3) only one other relig was attributed to that alter
# This preserves 108 ties from being deleted
df_w3_comb_data <- df_w3_comb_data %>%
mutate(dupe_alter=
duplicated(df_w3_comb_data["alterid"]))
df_alter_dupes <- df_w3_comb_data %>%
filter(dupe_alter == TRUE)
list_alter_dupes <- unique(df_alter_dupes$alterid)
df_alter_dupes <- df_w3_comb_data %>%
filter(alterid %in% list_alter_dupes)
df_alter_dupes <- df_alter_dupes %>%
group_by(alterid) %>%
mutate(n_rels = n_distinct(altrelig))
df_alter_dupes <- df_alter_dupes %>%
filter(n_rels == 2)
list_na_alter <- df_alter_dupes %>%
filter(is.na(altrelig))
list_na_alter <- list_na_alter$alterid
df_alter_dupes <- df_alter_dupes %>%
filter(alterid %in% list_na_alter)
df_alter_dupes <- df_alter_dupes %>%
group_by(alterid) %>%
mutate(altrelig = unique(altrelig[!is.na(altrelig)]))
df_imputed_alts <- df_alter_dupes %>%
select(alterid, altrelig)
df_imputed_alts <- distinct(df_imputed_alts)
df_imputed_alts <- rename(df_imputed_alts, altrelig_i = altrelig)
df_w3_comb_data <- left_join(df_w3_comb_data, df_imputed_alts, by = "alterid")
df_w3_comb_data$altrelig <- ifelse(is.na(df_w3_comb_data$altrelig), df_w3_comb_data$altrelig_i, df_w3_comb_data$altrelig)
rm(df_imputed_alts, df_alter_dupes, list_alter_dupes, list_na_alter)
# filter out altrelig == NA
df_w3_comb_data <- df_w3_comb_data |>
filter(!is.na(altrelig))
#change yourelig_1 to factor
df_w3_comb_data$yourelig_1 <- as.factor(df_w3_comb_data$yourelig_1)
# Create Proportion Measures ----------------------------------------------
# create same-relig variable
df_w3_comb_data <- df_w3_comb_data |>
mutate(
same_relig = case_when(
yourelig_1 == "Catholic" & altrelig == "Catholic" ~ 1,
yourelig_1 == "No Religion" & altrelig == "NoReligion" ~ 1,
yourelig_1 == "Other Religion" & altrelig == "OtherReligion" ~ 1,
yourelig_1 == "Protestant" & altrelig == "Protestant" ~ 1,
TRUE ~ 0
))
# count the number of same-relig alters
df_w3_comb_data <- df_w3_comb_data |>
group_by(egoid) %>%
mutate(n_samerelig = sum(same_relig == 1))
#count the degree
df_w3_comb_data <- df_w3_comb_data |>
group_by(egoid) %>%
mutate(degree = n())
# count the number of diff-relig alters
df_w3_comb_data <- df_w3_comb_data |>
group_by(egoid) %>%
mutate(n_diffrelig = degree-n_samerelig)
# calculate EI Index
df_w3_comb_data <- df_w3_comb_data |>
group_by(egoid) |>
mutate(ei = (n_diffrelig-n_samerelig)/(degree))
# Calculate Normalized EI Indices -----------------------------------------
#create vars for the denominators
table(df_basicsurv$yourelig_1)
e_cath <- 89+33+71
i_cath <- 525-1
e_none <- 525+33+71
i_none <- 89-1
e_other<- 525+89+71
i_other<- 33-1
e_prot <- 525+89+33
i_prot <- 71-1
df_w3_comb_data <- df_w3_comb_data %>%
mutate(
e_denominator = case_when(
yourelig_1 == "Catholic" ~ e_cath,
yourelig_1 == "No Religion" ~ e_none,
yourelig_1 == "Other Religion" ~ e_other,
yourelig_1 == "Protestant" ~ e_prot,
TRUE ~ 0
))
df_w3_comb_data <- df_w3_comb_data %>%
mutate(
i_denominator = case_when(
yourelig_1 == "Catholic" ~ i_cath,
yourelig_1 == "No Religion" ~ i_none,
yourelig_1 == "Other Religion" ~ i_other,
yourelig_1 == "Protestant" ~ i_prot,
TRUE ~ 0
))
# calculate normalized EI Index
df_w3_comb_data <- df_w3_comb_data |>
group_by(egoid) |>
mutate(ei_norm =
((n_diffrelig/e_denominator)-(n_samerelig/i_denominator))/((n_diffrelig/e_denominator)+(n_samerelig/i_denominator)))
# Create subset for regression models -------------------------------------
df_w3_model_data <- df_w3_comb_data |>
select(egoid, yourelig_1, degree, ei, ei_norm, n_samerelig, gender_1, race_1)
df_w3_model_data <- distinct(df_w3_model_data)
# Create a df for comparing observed avg ei to simulated networks ---------
df_observed_avg_ei <- df_w3_model_data %>%
group_by(yourelig_1) %>%
summarise_at(vars(ei), list(name = mean))
df_observed_avg_ei <-  rename(df_observed_avg_ei, percent = name)
#Mean ego degree
summary(df_w3_comb_data$degree)
#Mean ego degree
summary(df_w3_model_data$degree)
#Mean ego degree
summary(df_w3_model_data$degree,sd)
sd(df_w3_model_data$degree)
round(sd(df_w3_model_data$degree),4)
df_w3_comb_data$altrelucat
library(here)
library(readr)
library(dplyr)
# load ego network survey
df_netsurv <- read_csv(here('data', 'NetWorkSurvey(2-28-20).csv'))
# load basic survey
df_basicsurv <- read_csv(here('data', 'BasicSurvey(3-6-20).csv'))
# subset the network dataframes to W3
df_netsurv <- df_netsurv |>
filter(wave == 'Wave3')
df_w3_comb_data <- left_join(df_basicsurv, df_netsurv, by = 'egoid')
# filter out yourelig == NA
df_w3_comb_data <- df_w3_comb_data |>
filter(!is.na(yourelig_1))
table(df_w3_comb_data$altrelucat)
#ego religion
table(df_w3_model_data$yourelig_1)
# Header ------------------------------------------------------------------
# Title: Prep_data
# Author: Michael Wood
# Created: 20220908
# Last Edited: 20240603
# Purpose: Prepare survey and ego-network data for (W3) analysis
# Load packages -----------------------------------------------------------
library(here)
library(readr)
library(dplyr)
# Load data ---------------------------------------------------------------
# load ego network survey
df_netsurv <- read_csv(here('data', 'NetWorkSurvey(2-28-20).csv'))
# load basic survey
df_basicsurv <- read_csv(here('data', 'BasicSurvey(3-6-20).csv'))
# Subset Data -------------------------------------------------------------
# subset the network dataframes to W3
df_netsurv <- df_netsurv |>
filter(wave == 'Wave3')
# Merge data frames -------------------------------------------------------
df_w3_comb_data <- left_join(df_basicsurv, df_netsurv, by = 'egoid')
#netsurv_id_list <- unique(df_netsurv$egoid)
#basicsurv_id_list <- unique(df_basicsurv$egoid)
#comb_id_list <- Reduce(intersect,list(netsurv_id_list,basicsurv_id_list))
# Filter/Subset Data -------------------------------------------------------------
# filter out yourelig == NA
df_w3_comb_data <- df_w3_comb_data |>
filter(!is.na(yourelig_1))
# subset to on-campus ties
df_w3_comb_data <- df_w3_comb_data %>%
filter(altrelucat=="Student")
# impute missing alter relig in cases where
# 1) the alter was reported by multiple egos
# 2) at least one ego attributed a relig to that alter
# 3) only one other relig was attributed to that alter
# This preserves 108 ties from being deleted
df_w3_comb_data <- df_w3_comb_data %>%
mutate(dupe_alter=
duplicated(df_w3_comb_data["alterid"]))
df_alter_dupes <- df_w3_comb_data %>%
filter(dupe_alter == TRUE)
list_alter_dupes <- unique(df_alter_dupes$alterid)
df_alter_dupes <- df_w3_comb_data %>%
filter(alterid %in% list_alter_dupes)
df_alter_dupes <- df_alter_dupes %>%
group_by(alterid) %>%
mutate(n_rels = n_distinct(altrelig))
df_alter_dupes <- df_alter_dupes %>%
filter(n_rels == 2)
list_na_alter <- df_alter_dupes %>%
filter(is.na(altrelig))
list_na_alter <- list_na_alter$alterid
df_alter_dupes <- df_alter_dupes %>%
filter(alterid %in% list_na_alter)
df_alter_dupes <- df_alter_dupes %>%
group_by(alterid) %>%
mutate(altrelig = unique(altrelig[!is.na(altrelig)]))
df_imputed_alts <- df_alter_dupes %>%
select(alterid, altrelig)
df_imputed_alts <- distinct(df_imputed_alts)
df_imputed_alts <- rename(df_imputed_alts, altrelig_i = altrelig)
df_w3_comb_data <- left_join(df_w3_comb_data, df_imputed_alts, by = "alterid")
df_w3_comb_data$altrelig <- ifelse(is.na(df_w3_comb_data$altrelig), df_w3_comb_data$altrelig_i, df_w3_comb_data$altrelig)
rm(df_imputed_alts, df_alter_dupes, list_alter_dupes, list_na_alter)
# filter out altrelig == NA
df_w3_comb_data <- df_w3_comb_data |>
filter(!is.na(altrelig))
#change yourelig_1 to factor
df_w3_comb_data$yourelig_1 <- as.factor(df_w3_comb_data$yourelig_1)
# Create Proportion Measures ----------------------------------------------
# create same-relig variable
df_w3_comb_data <- df_w3_comb_data |>
mutate(
same_relig = case_when(
yourelig_1 == "Catholic" & altrelig == "Catholic" ~ 1,
yourelig_1 == "No Religion" & altrelig == "NoReligion" ~ 1,
yourelig_1 == "Other Religion" & altrelig == "OtherReligion" ~ 1,
yourelig_1 == "Protestant" & altrelig == "Protestant" ~ 1,
TRUE ~ 0
))
# count the number of same-relig alters
df_w3_comb_data <- df_w3_comb_data |>
group_by(egoid) %>%
mutate(n_samerelig = sum(same_relig == 1))
#count the degree
df_w3_comb_data <- df_w3_comb_data |>
group_by(egoid) %>%
mutate(degree = n())
# count the number of diff-relig alters
df_w3_comb_data <- df_w3_comb_data |>
group_by(egoid) %>%
mutate(n_diffrelig = degree-n_samerelig)
# calculate EI Index
df_w3_comb_data <- df_w3_comb_data |>
group_by(egoid) |>
mutate(ei = (n_diffrelig-n_samerelig)/(degree))
# Calculate Normalized EI Indices -----------------------------------------
#create vars for the denominators
table(df_basicsurv$yourelig_1)
e_cath <- 89+33+71
i_cath <- 525-1
e_none <- 525+33+71
i_none <- 89-1
e_other<- 525+89+71
i_other<- 33-1
e_prot <- 525+89+33
i_prot <- 71-1
df_w3_comb_data <- df_w3_comb_data %>%
mutate(
e_denominator = case_when(
yourelig_1 == "Catholic" ~ e_cath,
yourelig_1 == "No Religion" ~ e_none,
yourelig_1 == "Other Religion" ~ e_other,
yourelig_1 == "Protestant" ~ e_prot,
TRUE ~ 0
))
df_w3_comb_data <- df_w3_comb_data %>%
mutate(
i_denominator = case_when(
yourelig_1 == "Catholic" ~ i_cath,
yourelig_1 == "No Religion" ~ i_none,
yourelig_1 == "Other Religion" ~ i_other,
yourelig_1 == "Protestant" ~ i_prot,
TRUE ~ 0
))
# calculate normalized EI Index
df_w3_comb_data <- df_w3_comb_data |>
group_by(egoid) |>
mutate(ei_norm =
((n_diffrelig/e_denominator)-(n_samerelig/i_denominator))/((n_diffrelig/e_denominator)+(n_samerelig/i_denominator)))
# Create subset for regression models -------------------------------------
df_w3_model_data <- df_w3_comb_data |>
select(egoid, yourelig_1, degree, ei, ei_norm, n_samerelig, gender_1, race_1)
df_w3_model_data <- distinct(df_w3_model_data)
# Create a df for comparing observed avg ei to simulated networks ---------
df_observed_avg_ei <- df_w3_model_data %>%
group_by(yourelig_1) %>%
summarise_at(vars(ei), list(name = mean))
df_observed_avg_ei <-  rename(df_observed_avg_ei, percent = name)
#ego religion
table(df_w3_model_data$yourelig_1)
round(100*prop.table(table(df_w3_model_data$yourelig_1)),2)
270/361
table(df_w3_comb_data$yourelig_1)
prop.table(table(df_w3_comb_data$yourelig_1))
prop.table(table(basic_survey$yourelig_1))
prop.table(table(basic_surv$yourelig_1))
prop.table(table(df_basicsurv$yourelig_1))
